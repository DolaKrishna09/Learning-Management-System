-- MySQL dump 10.13  Distrib 8.0.31, for Win64 (x86_64)
--
-- Host: localhost    Database: course
-- ------------------------------------------------------
-- Server version	8.0.31

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `modules`
--

DROP TABLE IF EXISTS `modules`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `modules` (
  `MODULE_ID` int NOT NULL AUTO_INCREMENT,
  `COURSE_ID` int DEFAULT NULL,
  `MODULE_NAME` varchar(255) DEFAULT NULL,
  `PREREQUISITE` varchar(255) DEFAULT NULL,
  `OUTCOME` varchar(255) DEFAULT NULL,
  `MODULE_NOTES` text,
  PRIMARY KEY (`MODULE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `modules`
--

LOCK TABLES `modules` WRITE;
/*!40000 ALTER TABLE `modules` DISABLE KEYS */;
INSERT INTO `modules` VALUES (1,1,'Java Introduction','Basic Programming Knowledge and Listening Skills','Fluent in Java Basic concepts includes syntax, datatypes, Java Architecture etc..,','\nJava, a versatile programming language, encompasses fundamental concepts crucial for understanding its workings. Syntax, the set of rules governing code structure, plays a pivotal role in crafting Java programs. It dictates how instructions should be written to ensure proper execution.\n\nData types in Java define the kind of data a variable can hold, ranging from primitive types like integers and characters to more complex ones such as objects and arrays. Understanding data types is essential for efficient memory usage and accurate representation of information.\n\nJava\'s architecture is designed around a platform-independent approach, allowing programs to run on any device with the Java Virtual Machine (JVM). This architecture promotes portability and flexibility, enabling developers to create applications that can seamlessly execute across diverse environments.\n\nMastering these foundational elements—syntax, data types, and Java architecture—lays the groundwork for building robust and adaptable Java applications.'),(2,1,'Object Oriented Programming','Understanding of Java core concepts includes Datatypes, Variables, Loops, Methods, Constructors etc..,','Capable to code using Object Oriented Principles','Object-Oriented Programming (OOP) in Java revolves around key principles that facilitate modular and efficient code design. The first principle is encapsulation, which involves bundling data and methods that operate on that data into a single unit, known as a class. This encapsulation enhances data security and promotes a clear separation of concerns within the code. Inheritance, another crucial concept, allows a class to inherit properties and behaviors from another class, fostering code reuse and establishing a hierarchical relationship between classes. Polymorphism, the third principle, enables objects to take on multiple forms by allowing methods to be executed in different ways based on the context. This enhances code flexibility and extensibility. These fundamental principles—encapsulation, inheritance, and polymorphism—form the backbone of OOP in Java, providing a powerful framework for building scalable and maintainable software.'),(3,1,'Web Development using Java','Capable to code using OOPs ','Can develop Websites Using Java','Web development using Java involves leveraging frameworks such as Spring Boot and servlets to build robust and scalable applications. Spring Boot, a part of the broader Spring Framework, simplifies the development process by providing conventions and defaults for configuration, allowing developers to focus on business logic rather than boilerplate code. Servlets, on the other hand, are Java classes that handle HTTP requests and responses, forming the foundation of Java-based web applications.\n\nIn Java Spring Boot web development, developers can define RESTful APIs using annotations, making it intuitive to create endpoints and manage HTTP methods. Additionally, Spring Boot\'s dependency injection mechanism promotes modularity and ease of testing by managing object dependencies. This framework also supports the Model-View-Controller (MVC) architectural pattern, allowing for the separation of concerns between the application\'s logic, presentation, and data.\n\nBy combining the power of Spring Boot and servlets, Java developers can create dynamic and feature-rich web applications, taking advantage of the robustness of the Spring ecosystem and the versatility of servlets for handling web requests. This approach streamlines the development process, enhances maintainability, and ensures the scalability of Java-based web applications.'),(4,1,'Frontend - HTML, CSS','Listening skills basic knowledge of colors','Capable of designing static  webpages using HTML and CSS','HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets) are foundational technologies for web development, working in tandem to structure and style content on the internet. HTML serves as the backbone, providing the structural framework for web pages by defining elements like headings, paragraphs, images, and links. It establishes the document\'s hierarchy, facilitating the organization and presentation of information.\n\nCSS, on the other hand, enhances the visual appeal and layout of HTML elements. It enables developers to apply styles such as colors, fonts, spacing, and positioning, ensuring a consistent and visually pleasing user experience across different devices and screen sizes. CSS follows a cascading order of precedence, allowing developers to apply styles globally, per document, or at the individual element level.\n\nTogether, HTML and CSS form the core technologies for creating well-structured, aesthetically pleasing web pages. The separation of concerns between content (HTML) and presentation (CSS) allows for cleaner code, easier maintenance, and greater flexibility in adapting to various design requirements. This combination of markup and styling languages is fundamental to the creation of modern, responsive, and visually appealing websites.'),(5,1,'JavaScript - JS','Capable of Designing webpage using HTML and CSS','Can develop dynamic webpages using HTML, CSS and JavaScript','JavaScript is a versatile programming language that plays a crucial role in modern web development. As a client-side scripting language, it is primarily used to enhance interactivity and dynamic behavior in web browsers. JavaScript operates seamlessly with HTML and CSS, forming a powerful trio for building dynamic and engaging web applications.\n\nOne of the key features of JavaScript is its ability to manipulate the Document Object Model (DOM), allowing developers to dynamically update and modify the content and structure of a web page in real-time. Events, such as user interactions or system events, trigger JavaScript functions, enabling responsive and interactive user interfaces.\n\nJavaScript supports both procedural and object-oriented programming paradigms, offering flexibility in coding styles. The language also benefits from a vast ecosystem of libraries and frameworks, with popular ones like jQuery, React, and Angular, which simplify common tasks and streamline development.\n\nFurthermore, JavaScript has evolved beyond the confines of the browser with the advent of Node.js, enabling server-side development as well. This expansion broadens its applicability, allowing developers to use a single language for both client and server-side scripting.\n\nIn summary, JavaScript is a fundamental language for web development, providing the means to create dynamic and interactive user experiences. Its versatility, compatibility with web technologies, and continual evolution make it an integral part of the modern web development landscape.'),(6,1,'React JS - Framework','Able to develop Dynamic website using HTML, CSS, and JavaScript','Capable to Develop Single Page Applications - SPA using React JS ','React.js, a powerful JavaScript library developed by Facebook, is widely employed for building user interfaces in modern web applications. Its declarative approach simplifies the creation of interactive and dynamic UIs by allowing developers to describe how the interface should look and behave in different states. React utilizes a virtual DOM, optimizing rendering performance by updating only the components that have changed, thereby enhancing the overall efficiency of web applications.\n\nOne of React\'s key principles is component-based architecture, promoting modular and reusable code. Components encapsulate their own state and behavior, facilitating the development of complex interfaces through the composition of smaller, manageable units. This modular structure enhances maintainability, scalability, and collaboration among development teams.\n\nReact\'s unidirectional data flow, facilitated by the Flux architecture or its modern variant, Redux, ensures predictable state management. This helps prevent common issues such as data inconsistency and makes it easier to debug and understand the application\'s behavior.\n\nMoreover, React\'s thriving ecosystem, including tools like Create React App, Next.js, and React Router, contributes to a seamless development experience. Its compatibility with various backend technologies and the ability to integrate with third-party libraries further solidify React\'s position as a go-to solution for building high-performance and scalable user interfaces in the ever-evolving landscape of web development.'),(7,1,'Structured Query Language(SQL) - Introduction','Basic Knowledge on datatypes, Listening Skills','Understanding of SQL basic concepts includes syntax, Table structures, Commands etc..,','SQL (Structured Query Language) is a domain-specific language used for managing and manipulating relational databases. It serves as a fundamental tool in database management systems, providing a standardized way to interact with and retrieve information from databases. SQL operates through a set of declarative statements that enable users to define, query, update, and manage data effectively.\n\nOne of the key features of SQL is its ability to perform queries on databases. SELECT statements allow users to retrieve specific data from one or more tables based on various conditions, while JOIN operations enable the combination of data from multiple tables. SQL also supports data modification operations such as INSERT, UPDATE, and DELETE, facilitating the management and maintenance of database records.\n\nSQL follows a well-defined syntax and structure, making it accessible to both beginners and experienced developers. It provides a robust set of data integrity constraints, ensuring the accuracy and reliability of information stored in databases. Common constraints include PRIMARY KEY for unique identification, FOREIGN KEY for establishing relationships between tables, and CHECK constraints for validating data integrity.\n\nBeyond querying and data manipulation, SQL supports the creation and modification of database schema through statements like CREATE TABLE and ALTER TABLE. Additionally, it includes aggregate functions for performing calculations on sets of data, enhancing the analytical capabilities of SQL.\n\nIn summary, SQL is a powerful and standardized language for managing relational databases, offering a comprehensive set of features for querying, updating, and maintaining data. Its widespread use across various database management systems makes it an essential skill for database administrators, developers, and anyone involved in handling and analyzing data.'),(8,1,'Joining 2 or More Tables Using SQL JOINS','capable of executing queries using commands like DML, DDL, TCL, DQL','Capable of writing complex queries using Joins and fetching values from 2 or more tables','SQL joins are essential operations for combining data from multiple tables in a relational database. These operations enable developers and database administrators to retrieve comprehensive datasets by leveraging relationships between tables. The primary types of SQL joins include INNER JOIN, LEFT JOIN (or LEFT OUTER JOIN), RIGHT JOIN (or RIGHT OUTER JOIN), and FULL JOIN (or FULL OUTER JOIN).\n\nAn INNER JOIN returns only the rows where there is a match in both tables based on the specified join condition. This type of join is commonly used when you want to retrieve records that exist in both tables.\n\nA LEFT JOIN returns all the rows from the left table and the matched rows from the right table. In cases where there is no match, NULL values are returned for columns from the right table. This is useful when you want to retrieve all records from one table, along with any matching records from another.\n\nConversely, a RIGHT JOIN returns all the rows from the right table and the matched rows from the left table. Any unmatched rows from the left table will have NULL values in the result set. RIGHT JOINs are less common than LEFT JOINs but offer similar functionality.\n\nA FULL JOIN returns all rows when there is a match in either the left or right table. If there is no match, NULL values are returned for columns from the table with no corresponding match.\n\nJoin conditions in SQL typically involve comparing columns from different tables using equality operators. Understanding and effectively using SQL joins are crucial for constructing complex queries and obtaining comprehensive insights from relational databases, especially when dealing with normalized data spread across multiple tables.'),(9,1,'Procedures in SQL','Capable of writing  Complex queries using JOINS ','Able to perform complex operations using SQL basic knowledge with Procedures ','SQL procedures, often referred to as stored procedures, are precompiled sets of one or more SQL statements that can be stored and executed on a database server. These procedures offer several advantages, including code reusability, improved performance, and enhanced security.\n\nTo create an SQL procedure, you typically use the CREATE PROCEDURE statement, defining the procedure\'s name, parameters, and the SQL statements it should execute. Parameters can be both input and output, allowing for flexibility in handling data.\n\nOnce created, SQL procedures can be invoked using the EXECUTE or CALL statement, providing the necessary input parameters if any. The procedure then executes its predefined set of SQL statements, performing operations such as data manipulation, retrieval, or updates within the database.\n\nSQL procedures are beneficial for encapsulating complex business logic or repetitive tasks within the database. This reduces the amount of data transferred between the application and the database server, contributing to improved performance. Additionally, stored procedures enhance security by allowing controlled access to database operations, with users executing procedures rather than direct SQL statements.\n\nFurthermore, SQL procedures facilitate code maintenance and updates since changes to the procedural logic can be made centrally on the database server, affecting all applications that call the procedure.\n\nIn summary, SQL procedures offer a structured and efficient way to manage and execute SQL statements on a database server. They enhance code organization, promote reusability, and contribute to better performance and security in database-driven applications.'),(10,2,'C Sharp Introduction ','Basic Analytical skills, Listening skills, Understanding about programming basics','Capable to code using C# language, Understanding of Syntax','\nC# (pronounced C-sharp) is a powerful, modern, and object-oriented programming language developed by Microsoft. Introduced in the early 2000s, C# is designed to be a versatile language suitable for building a wide range of applications, including desktop, web, mobile, and cloud-based applications. It is a key component of the Microsoft .NET framework, providing a robust and consistent programming environment.\n\nC# combines the strengths of C and C++ with the simplicity and productivity of languages like Java. It supports features such as strong typing, automatic garbage collection, and a rich set of standard libraries, making it an efficient and developer-friendly language.\n\nOne of C#\'s distinguishing features is its support for common language runtime (CLR), which allows developers to write code in multiple languages that can be seamlessly integrated into a single application. This interoperability enables the reuse of existing code and integration with other .NET languages.\n\nC# is particularly well-suited for building Windows applications using technologies like Windows Presentation Foundation (WPF) and Universal Windows Platform (UWP). It is also widely used in web development with ASP.NET, as well as in game development through the Unity game engine.\n\nThe language continues to evolve with regular updates, introducing new features and enhancements to keep up with the changing landscape of software development. Overall, C# stands as a versatile and robust programming language, empowering developers to create a wide array of applications across different platforms and domains.'),(11,2,'ASP.net','Able to code using C# programming Language','Capable to develop website using Microsoft ASP.net','\nASP.NET, developed by Microsoft, stands as a robust and versatile web application framework, integral to the .NET ecosystem. It provides developers with a powerful set of tools for building dynamic, secure, and scalable web applications. With support for both the Web Forms and MVC architectural patterns, ASP.NET accommodates diverse development preferences. Its server-side programming capabilities, primarily using languages like C# and VB.NET, allow for the execution of code on the server, facilitating the generation of dynamic content. The framework also addresses state management efficiently, offering mechanisms such as session state and view state. ASP.NET places a strong emphasis on security, incorporating features like authentication and authorization to safeguard web applications. The tight integration with Visual Studio enhances the development experience by providing a feature-rich IDE with debugging tools and seamless project management. With the introduction of ASP.NET Core, the framework has evolved to be cross-platform and open-source, catering to modern cloud-based and containerized application development. Additionally, the inclusion of Web API supports the creation of RESTful APIs, contributing to interoperability between systems. In essence, ASP.NET remains a cornerstone for web developers, offering a comprehensive suite of features to address the demands of contemporary web application development.'),(12,2,'ADO.net','Capable to code using C# language, Understanding about ASP.net','Able to interact with Database using Microsoft ADO.net','ADO.NET, or ActiveX Data Objects for .NET, is a fundamental set of libraries within the .NET Framework designed to facilitate data access in applications. It encompasses several key components that enable developers to interact seamlessly with diverse data sources. A crucial part of ADO.NET is the Connection class, exemplified by SqlConnection, which establishes connections to data sources such as SQL Server databases. Commands, represented by classes like SqlCommand and OleDbCommand, allow the execution of queries, stored procedures, and updates. The DataReader class provides a forward-only, read-only mechanism for efficiently accessing large result sets. ADO.NET\'s Disconnected Data Architecture is notable, involving the use of DataAdapter to bridge between data sources and in-memory datasets. The DataSet, a core component, acts as a container for holding multiple DataTables, representing different result sets or tables from the data source. This disconnected approach allows developers to fetch data from the database, manipulate it in-memory, and then update the data source as needed, enhancing scalability and performance. ADO.NET\'s versatility is highlighted by its support for various data providers, enabling developers to interact with different types of databases through a unified set of programming interfaces. Overall, ADO.NET serves as a powerful tool for building data-centric applications across diverse domains within the .NET ecosystem.'),(13,2,'Frontend - HTML, CSS','Listening skills basic knowledge of colors','Capable of designing static webpages using HTML and CSS','HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets) are foundational technologies for web development, working in tandem to structure and style content on the internet. HTML serves as the backbone, providing the structural framework for web pages by defining elements like headings, paragraphs, images, and links. It establishes the document\'s hierarchy, facilitating the organization and presentation of information. CSS, on the other hand, enhances the visual appeal and layout of HTML elements. It enables developers to apply styles such as colors, fonts, spacing, and positioning, ensuring a consistent and visually pleasing user experience across different devices and screen sizes. CSS follows a cascading order of precedence, allowing developers to apply styles globally, per document, or at the individual element level. Together, HTML and CSS form the core technologies for creating well-structured, aesthetically pleasing web pages. The separation of concerns between content (HTML) and presentation (CSS) allows for cleaner code, easier maintenance, and greater flexibility in adapting to various design requirements. This combination of markup and styling languages is fundamental to the creation of modern, responsive, and visually appealing websites.'),(14,2,'JavaScript - JS','Capable of Designing webpage using HTML and CSS','Can develop dynamic webpages using HTML, CSS and JavaScript','JavaScript is a versatile programming language that plays a crucial role in modern web development. As a client-side scripting language, it is primarily used to enhance interactivity and dynamic behavior in web browsers. JavaScript operates seamlessly with HTML and CSS, forming a powerful trio for building dynamic and engaging web applications. One of the key features of JavaScript is its ability to manipulate the Document Object Model (DOM), allowing developers to dynamically update and modify the content and structure of a web page in real-time. Events, such as user interactions or system events, trigger JavaScript functions, enabling responsive and interactive user interfaces. JavaScript supports both procedural and object-oriented programming paradigms, offering flexibility in coding styles. The language also benefits from a vast ecosystem of libraries and frameworks, with popular ones like jQuery, React, and Angular, which simplify common tasks and streamline development. Furthermore, JavaScript has evolved beyond the confines of the browser with the advent of Node.js, enabling server-side development as well. This expansion broadens its applicability, allowing developers to use a single language for both client and server-side scripting. In summary, JavaScript is a fundamental language for web development, providing the means to create dynamic and interactive user experiences. Its versatility, compatibility with web technologies, and continual evolution make it an integral part of the modern web development landscape.'),(15,2,'React JS - Framework','Able to develop Dynamic website using HTML, CSS, and JavaScript','Capable to Develop Single Page Applications - SPA using React JS','React.js, a powerful JavaScript library developed by Facebook, is widely employed for building user interfaces in modern web applications. Its declarative approach simplifies the creation of interactive and dynamic UIs by allowing developers to describe how the interface should look and behave in different states. React utilizes a virtual DOM, optimizing rendering performance by updating only the components that have changed, thereby enhancing the overall efficiency of web applications. One of React\'s key principles is component-based architecture, promoting modular and reusable code. Components encapsulate their own state and behavior, facilitating the development of complex interfaces through the composition of smaller, manageable units. This modular structure enhances maintainability, scalability, and collaboration among development teams. React\'s unidirectional data flow, facilitated by the Flux architecture or its modern variant, Redux, ensures predictable state management. This helps prevent common issues such as data inconsistency and makes it easier to debug and understand the application\'s behavior. Moreover, React\'s thriving ecosystem, including tools like Create React App, Next.js, and React Router, contributes to a seamless development experience. Its compatibility with various backend technologies and the ability to integrate with third-party libraries further solidify React\'s position as a go-to solution for building high-performance and scalable user interfaces in the ever-evolving landscape of web development.'),(16,2,'Structured Query Language(SQL) - Introduction','Basic Knowledge on datatypes, Listening Skills','Understanding of SQL basic concepts includes syntax, Table structures, Commands etc..,','SQL (Structured Query Language) is a domain-specific language used for managing and manipulating relational databases. It serves as a fundamental tool in database management systems, providing a standardized way to interact with and retrieve information from databases. SQL operates through a set of declarative statements that enable users to define, query, update, and manage data effectively. One of the key features of SQL is its ability to perform queries on databases. SELECT statements allow users to retrieve specific data from one or more tables based on various conditions, while JOIN operations enable the combination of data from multiple tables. SQL also supports data modification operations such as INSERT, UPDATE, and DELETE, facilitating the management and maintenance of database records. SQL follows a well-defined syntax and structure, making it accessible to both beginners and experienced developers. It provides a robust set of data integrity constraints, ensuring the accuracy and reliability of information stored in databases. Common constraints include PRIMARY KEY for unique identification, FOREIGN KEY for establishing relationships between tables, and CHECK constraints for validating data integrity. Beyond querying and data manipulation, SQL supports the creation and modification of database schema through statements like CREATE TABLE and ALTER TABLE. Additionally, it includes aggregate functions for performing calculations on sets of data, enhancing the analytical capabilities of SQL. In summary, SQL is a powerful and standardized language for managing relational databases, offering a comprehensive set of features for querying, updating, and maintaining data. Its widespread use across various database management systems makes it an essential skill for database administrators, developers, and anyone involved in handling and analyzing data.'),(17,2,'Joining 2 or More Tables Using SQL JOINS','capable of executing queries using commands like DML, DDL, TCL, DQL','Capable of writing complex queries using Joins and fetching values from 2 or more tables','SQL joins are essential operations for combining data from multiple tables in a relational database. These operations enable developers and database administrators to retrieve comprehensive datasets by leveraging relationships between tables. The primary types of SQL joins include INNER JOIN, LEFT JOIN (or LEFT OUTER JOIN), RIGHT JOIN (or RIGHT OUTER JOIN), and FULL JOIN (or FULL OUTER JOIN). An INNER JOIN returns only the rows where there is a match in both tables based on the specified join condition. This type of join is commonly used when you want to retrieve records that exist in both tables. A LEFT JOIN returns all the rows from the left table and the matched rows from the right table. In cases where there is no match, NULL values are returned for columns from the right table. This is useful when you want to retrieve all records from one table, along with any matching records from another. Conversely, a RIGHT JOIN returns all the rows from the right table and the matched rows from the left table. Any unmatched rows from the left table will have NULL values in the result set. RIGHT JOINs are less common than LEFT JOINs but offer similar functionality. A FULL JOIN returns all rows when there is a match in either the left or right table. If there is no match, NULL values are returned for columns from the table with no corresponding match. Join conditions in SQL typically involve comparing columns from different tables using equality operators. Understanding and effectively using SQL joins are crucial for constructing complex queries and obtaining comprehensive insights from relational databases, especially when dealing with normalized data spread across multiple tables.'),(18,2,'Procedures in SQL','Capable of writing Complex queries using JOINS','Able to perform complex operations using SQL basic knowledge with Procedures','SQL procedures, often referred to as stored procedures, are precompiled sets of one or more SQL statements that can be stored and executed on a database server. These procedures offer several advantages, including code reusability, improved performance, and enhanced security. To create an SQL procedure, you typically use the CREATE PROCEDURE statement, defining the procedure\'s name, parameters, and the SQL statements it should execute. Parameters can be both input and output, allowing for flexibility in handling data. Once created, SQL procedures can be invoked using the EXECUTE or CALL statement, providing the necessary input parameters if any. The procedure then executes its predefined set of SQL statements, performing operations such as data manipulation, retrieval, or updates within the database. SQL procedures are beneficial for encapsulating complex business logic or repetitive tasks within the database. This reduces the amount of data transferred between the application and the database server, contributing to improved performance. Additionally, stored procedures enhance security by allowing controlled access to database operations, with users executing procedures rather than direct SQL statements. Furthermore, SQL procedures facilitate code maintenance and updates since changes to the procedural logic can be made centrally on the database server, affecting all applications that call the procedure. In summary, SQL procedures offer a structured and efficient way to manage and execute SQL statements on a database server. They enhance code organization, promote reusability, and contribute to better performance and security in database-driven applications.'),(19,3,'MongoDB Basics','Basic Understanding of Databases','Proficient in MongoDB fundamentals and CRUD operations','\nIn this module, we delve into the essential foundations of MongoDB, a pivotal component in MERN (MongoDB, Express.js, React, Node.js) stack development. MongoDB stands out as a NoSQL database, offering a paradigm shift from traditional relational databases by embracing document-oriented data storage. Participants will embark on a comprehensive journey through the intricacies of MongoDB, gaining a profound understanding of its core concepts and functionalities.\n\nThe focal point of this module revolves around the intrinsic structure of MongoDB, where data is stored in BSON (Binary JSON) documents. Through practical exercises, participants will engage in hands-on experiences, honing their skills in crafting and manipulating JSON-like documents to store and retrieve information efficiently.\n\nCollections, the fundamental organizational units in MongoDB, are explored in depth. Participants will learn to conceptualize and structure data within collections, facilitating the creation of a cohesive and scalable database architecture.\n\nA pivotal aspect of MongoDB\'s prowess lies in its support for powerful CRUD operations: Create, Read, Update, and Delete. Through immersive learning, participants will master the art of seamlessly integrating these operations into their database interactions, thereby empowering them to efficiently manage data throughout the development lifecycle.\n\nThe MongoDB Shell emerges as a key tool in this module, enabling participants to execute queries and commands directly against the database. This hands-on experience with the shell empowers participants to develop a robust skill set in querying MongoDB, a critical skill for any MERN stack developer.'),(20,3,'Express.js and Node.js','Familiarity with JavaScript and Basic Web Development','Competent in building server-side applications with Express.js and Node.js','\nIn this module, participants will embark on a comprehensive exploration of server-side development, focusing on the dynamic duo of Express.js and Node.js within the MERN (MongoDB, Express.js, React, Node.js) stack. Express.js, revered for its minimalist yet powerful framework for building web applications, takes center stage as participants learn to construct robust and scalable APIs.\n\nExpress.js serves as the cornerstone for building server-side applications, and participants will delve into its intricacies, acquiring the skills to architect APIs that meet the demands of modern web development. The module places a strong emphasis on hands-on learning, guiding participants through the process of crafting APIs that seamlessly integrate with the other components of the MERN stack.\n\nNode.js, renowned for its event-driven and non-blocking I/O architecture, complements Express.js, providing a robust runtime environment for server-side JavaScript execution. Participants will gain a deep understanding of Node.js and its role in enhancing the performance and responsiveness of server-side applications.\n\nKey topics covered include routing, where participants learn to design logical and organized paths for handling various types of requests. Middleware, another crucial aspect of Express.js, is explored in detail, empowering participants to implement custom functionalities and enhance the request-response cycle effectively.\n\nThe module also delves into the intricate art of handling HTTP requests and responses, offering participants insights into the mechanisms that facilitate seamless communication between the client and the server. Through practical exercises, participants will master the intricacies of request handling, ensuring a smooth flow of data and interactions within their applications.'),(21,3,'React.js Fundamentals','Proficiency in HTML, CSS, and JavaScript','Able to create interactive and dynamic user interfaces with React.js','\nIn this comprehensive module, participants will delve into the heart of front-end development within the MERN (MongoDB, Express.js, React, Node.js) stack, with a primary focus on React.js. As a powerful JavaScript library dedicated to crafting dynamic user interfaces, React.js plays a pivotal role in shaping the interactive and responsive aspects of modern web applications.\n\nThe module commences with an in-depth exploration of React.js fundamentals, where participants will grasp core concepts such as components, props, state, and JSX (JavaScript XML). Through a combination of theoretical insights and practical exercises, participants will not only understand these foundational concepts but also gain hands-on experience in applying them to real-world scenarios.\n\nA significant portion of the module is dedicated to the construction of single-page applications (SPAs) using React.js. Participants will learn the art of building seamless and fluid user interfaces that enhance the overall user experience. Through practical implementation, they will navigate the intricacies of structuring components and utilizing props to create modular and reusable UI elements.\n\nThe component lifecycle in React.js emerges as a critical topic, and participants will gain a deep understanding of the phases that components go through, from initialization to rendering and updating. This knowledge empowers participants to optimize performance and manage application state effectively.'),(22,3,'Full-stack Development with MERN','Completion of MongoDB, Express.js, Node.js, and React.js modules','Proficient in end-to-end MERN stack development, capable of building and deploying full-stack applications','\nIn this all-encompassing module, participants will embark on a holistic journey through full-stack MERN (MongoDB, Express.js, React.js, Node.js) development. The module integrates the key components of the MERN stack, guiding participants to seamlessly combine front-end and back-end technologies. Through a comprehensive curriculum and practical projects, participants will gain the expertise needed to develop, deploy, and manage feature-rich web applications.\n\nThe module kicks off by exploring the seamless integration of MongoDB, Express.js, React.js, and Node.js. Participants will learn how to establish a cohesive connection between the database, server, and client-side components, laying the foundation for a unified and efficient MERN stack application.\n\nHandling authentication, a critical aspect of modern web applications, is a central topic within the module. Participants will delve into strategies for user authentication, ensuring the security and integrity of their applications. Practical implementations will provide participants with hands-on experience in implementing secure authentication mechanisms within the MERN stack.\n\nApplication state management, a key consideration in large-scale and dynamic web applications, is thoroughly covered. Participants will learn to effectively manage and synchronize state between the front-end and back-end components, ensuring a seamless user experience.'),(23,3,'Authentication and Authorization in MERN','Completion of MongoDB, Express.js, Node.js, and React.js modules','Proficient in implementing secure authentication and authorization mechanisms in MERN applications','\nIn this specialized module, participants will embark on a deep dive into the critical realm of web application security, with a focus on implementing robust authentication and authorization mechanisms within MERN (MongoDB, Express.js, React.js, Node.js) applications. Recognizing that security is paramount in the digital landscape, this module equips participants with the knowledge and skills needed to fortify their applications against common security threats.\n\nThe module commences with a comprehensive exploration of user authentication strategies. Participants will delve into various authentication mechanisms, gaining insights into secure practices for verifying and validating user identities within the MERN stack. Practical exercises will provide hands-on experience, allowing participants to implement and understand the intricacies of user authentication.\n\nSession management, another critical facet of web application security, is thoroughly covered. Participants will learn best practices for managing user sessions securely, ensuring that authentication persists and is maintained throughout the user\'s interaction with the application. Techniques for mitigating common session-related vulnerabilities will be explored, enhancing participants\' ability to create resilient and secure MERN applications.'),(24,3,'State Management with Redux','Understanding of React.js fundamentals','Adept at managing application state using Redux in MERN stack applications','In this specialized module, participants will delve into the critical realm of state management in MERN (MongoDB, Express.js, React.js, Node.js) applications, addressing the growing complexity of these projects. A particular emphasis is placed on the integration of Redux, a predictable state container designed for JavaScript applications. This module equips participants with the skills and knowledge needed to efficiently manage and synchronize the state within their MERN stack projects.\n\nThe module commences with a comprehensive exploration of the principles of Redux. Participants will gain a deep understanding of the Redux architecture, learning how it provides a centralized and predictable approach to managing application state. The theoretical foundations laid in this section serve as a solid groundwork for the practical implementations to follow.\n\nKey components of Redux, including actions and reducers, are thoroughly covered. Participants will learn to design and implement actions that represent state changes, as well as reducers that specify how the application\'s state should transition in response to these actions. Practical exercises will provide hands-on experience in crafting these fundamental elements of Redux.'),(25,3,'Deployment and Scaling MERN Applications','Completion of all previous MERN modules','Skilled in deploying and scaling MERN applications for production environments','In this advanced module, participants will embark on a crucial phase of the development lifecycle, transitioning MERN (MongoDB, Express.js, React.js, Node.js) applications from the development environment to production. The focus of this module is on deployment strategies and scalability considerations, key elements in ensuring the robustness and efficiency of applications in real-world scenarios.\n\nThe module begins with an exploration of best practices for deploying MERN applications to cloud platforms. Participants will gain insights into leveraging popular cloud services to host and manage their applications securely and efficiently. Practical guidance will cover the steps involved in configuring cloud environments, ensuring seamless deployment and optimal performance in a scalable manner.\n\nConfiguring production environments is a central aspect of this module. Participants will learn the intricacies of setting up production environments that are tailored for the specific needs of MERN stack applications. Topics include server configurations, database optimizations, and security considerations to create a stable and secure production environment.\n\nOptimizing performance for scalability is a critical consideration as applications grow in user base and complexity. Participants will delve into strategies for optimizing the performance of MERN applications, ensuring responsiveness and reliability even under high traffic. Techniques for load balancing, caching, and other scalability measures will be explored to empower participants to architect applications that can seamlessly scale with demand.\n\nThrough practical exercises and real-world examples, participants will gain hands-on experience in deploying and scaling feature-rich MERN applications. The module aims to equip participants with the knowledge and skills needed to navigate the challenges of taking applications live, providing them with the confidence to deploy and scale MERN stack projects in diverse production environments.'),(26,4,'Introduction to Data Science','Basic Understanding of Statistics and Programming','Familiarity with Data Science concepts and methodologies','\nIn this comprehensive module, participants will be introduced to the dynamic and interdisciplinary realm of Data Science—an evolving field that amalgamates statistical analysis, programming skills, and domain expertise to derive meaningful insights and knowledge from data. The module covers fundamental concepts that serve as the bedrock for Data Science practitioners, encompassing exploratory data analysis, data preprocessing, and the overarching data science workflow. Through theoretical insights and practical applications, participants will gain a foundational understanding of the pivotal role that data plays in informed decision-making and effective problem-solving.\n\nThe module begins by demystifying the core principles of Data Science, establishing it as a powerful amalgamation of statistical methods, computational tools, and subject-specific knowledge. Participants will delve into the multifaceted nature of the data science workflow, discovering how each stage—from data collection to analysis and interpretation—contributes to the extraction of valuable insights.\n\nExploratory data analysis (EDA) takes center stage as participants learn to navigate and understand datasets effectively. Through hands-on exercises, participants will gain proficiency in using statistical and visual techniques to uncover patterns, trends, and anomalies within the data. EDA serves as a crucial step in laying the groundwork for subsequent analyses and decision-making.'),(27,4,'Data Exploration and Visualization','Completion of Introduction to Data Science','Proficient in exploring and visualizing data using tools like Python and Matplotlib','Data exploration is a crucial step in the Data Science process. This module covers techniques for exploring and visualizing data to uncover patterns, trends, and outliers. Students will learn to use programming languages like Python and visualization libraries like Matplotlib to create informative plots and charts. The ability to effectively communicate insights through visualizations is emphasized.'),(28,4,'Statistical Analysis in Data Science','Completion of Data Exploration and Visualization','Understanding of statistical methods for hypothesis testing and inference','Statistical analysis is at the core of Data Science. This module delves into statistical methods used for hypothesis testing, significance testing, and making inferences from data. Students will apply statistical techniques to real-world datasets, gaining the skills needed to draw meaningful conclusions and make data-driven decisions.'),(29,4,'Machine Learning Fundamentals','Completion of Statistical Analysis in Data Science','Ability to apply basic machine learning algorithms for predictive modeling','Machine Learning is a key aspect of Data Science. This module introduces fundamental machine learning concepts and algorithms. Students will explore supervised and unsupervised learning techniques, understand model evaluation, and gain hands-on experience in implementing machine learning algorithms using popular libraries such as scikit-learn.'),(30,4,'Deep Learning and Neural Networks','Completion of Machine Learning Fundamentals','Proficiency in implementing deep learning models using frameworks like TensorFlow and PyTorch','Deep Learning is a subset of machine learning that focuses on neural networks. This module covers the principles of deep learning and its applications. Students will learn to design and train neural networks using frameworks like TensorFlow and PyTorch. The module also explores advanced topics such as convolutional neural networks (CNNs) and recurrent neural networks (RNNs).'),(31,4,'Big Data and Data Processing','Completion of Machine Learning Fundamentals','Ability to work with big data technologies for processing and analyzing large datasets','As data sizes continue to grow, handling big data becomes essential in Data Science. This module introduces big data technologies and tools for processing and analyzing large datasets. Students will explore technologies like Apache Spark and Hadoop, gaining practical experience in distributed computing and data processing.'),(32,4,'Data Science Capstone Project','Completion of previous modules','Completion of a comprehensive Data Science project applying learned concepts','The Data Science Capstone Project provides students with the opportunity to apply their knowledge and skills to a real-world problem. Working on a comprehensive project, students will go through the entire data science lifecycle, from problem formulation and data collection to modeling, evaluation, and presentation of results. This project serves as a culmination of the skills acquired throughout the course.'),(33,5,'Python Programming Fundamentals','Basic Understanding of Programming Concepts','Proficiency in Python programming for web development','This module covers the fundamentals of Python programming, focusing on topics such as variables, data types, control flow, and functions. Students will gain hands-on experience in writing Python code and solving programming challenges. The goal is to provide a solid foundation for building web applications using Python.'),(34,5,'Introduction to Web Development with Flask','Completion of Python Programming Fundamentals','Ability to build basic web applications using Flask','Flask is a lightweight web framework for Python. In this module, students will learn the basics of web development using Flask. Topics include routing, templates, forms, and interacting with databases. By the end of this module, students will be able to create simple web applications and understand the principles of web development with Flask.'),(35,5,'Database Design and SQL with SQLite','Completion of Introduction to Web Development with Flask','Proficiency in designing databases and using SQL with SQLite','A strong understanding of databases is crucial for full-stack development. This module covers the principles of database design and SQL using the SQLite database. Students will learn to design database schemas, create tables, and perform CRUD operations using SQL. The knowledge gained here will be essential for building data-driven web applications.'),(36,5,'Building RESTful APIs with Flask','Completion of Database Design and SQL with SQLite','Ability to design and implement RESTful APIs using Flask','RESTful APIs are a key component of modern web applications. In this module, students will learn to design and implement RESTful APIs using Flask. Topics include routing, request handling, authentication, and interacting with a database through API endpoints. Students will gain practical experience in building APIs that can be consumed by front-end applications or other services.'),(37,5,'Frontend Development with HTML, CSS, and JavaScript','Completion of Python Programming Fundamentals','Proficiency in building interactive and responsive user interfaces','Frontend development is essential for creating user-friendly web applications. This module covers the basics of HTML, CSS, and JavaScript. Students will learn to structure web pages, style them with CSS, and add interactivity with JavaScript. The goal is to equip students with the skills needed to create modern and responsive user interfaces for their full-stack applications.'),(38,5,'Integration of Frontend with Flask Backend','Completion of Frontend Development with HTML, CSS, and JavaScript','Ability to integrate frontend components with a Flask backend','This module focuses on integrating the frontend components developed in the previous module with the Flask backend. Students will learn to establish communication between the frontend and backend, handle data exchange, and create a seamless user experience. The module emphasizes the importance of collaboration between frontend and backend development in a full-stack environment.'),(39,5,'Authentication and Authorization','Completion of Building RESTful APIs with Flask','Understanding of user authentication and authorization in web applications','Securing web applications is crucial for protecting user data and ensuring privacy. This module covers the concepts of authentication and authorization. Students will learn to implement user authentication, manage user sessions, and control access to different parts of the application. The knowledge gained here will contribute to building secure and robust full-stack applications.'),(40,5,'Deployment and Scaling','Completion of all previous modules','Ability to deploy and scale full-stack applications','Deployment and scaling are essential aspects of delivering a web application to users. This module covers the deployment of Flask applications, containerization using technologies like Docker, and considerations for scaling applications. Students will gain practical experience in deploying their full-stack projects to cloud platforms and optimizing for performance and scalability.'),(41,5,'Full Stack Development Capstone Project','Completion of all previous modules','Completion of a comprehensive full-stack development project','The Full Stack Development Capstone Project provides students with the opportunity to showcase their skills by working on a comprehensive project. Students will bring together all the concepts learned throughout the course to design, develop, and deploy a full-stack web application. This project serves as a culmination of their journey in mastering Python full-stack development.'),(42,6,'Introduction to Machine Learning','Basic Understanding of Statistics and Programming','Familiarity with fundamental machine learning concepts and algorithms','This module serves as an introduction to machine learning, covering essential concepts such as supervised learning, unsupervised learning, and reinforcement learning. Students will explore common machine learning algorithms, understand the importance of training and evaluation, and gain insights into real-world applications of machine learning.'),(43,6,'Supervised Learning: Regression and Classification','Completion of Introduction to Machine Learning','Proficiency in implementing and evaluating supervised learning models','Supervised learning is a core area of machine learning. This module focuses on regression and classification techniques. Students will learn to apply algorithms such as linear regression, logistic regression, decision trees, and support vector machines. Emphasis is placed on model evaluation, feature selection, and understanding the nuances of different supervised learning approaches.'),(44,6,'Unsupervised Learning: Clustering and Dimensionality Reduction','Completion of Supervised Learning: Regression and Classification','Ability to apply clustering and dimensionality reduction techniques','Unsupervised learning involves exploring patterns in unlabeled data. This module covers clustering algorithms (e.g., k-means) and dimensionality reduction techniques (e.g., PCA). Students will gain hands-on experience in grouping data points based on similarities and reducing the complexity of high-dimensional data.'),(45,6,'Introduction to Deep Learning','Completion of Unsupervised Learning: Clustering and Dimensionality Reduction','Understanding of neural networks and introductory deep learning concepts','Deep learning has revolutionized machine learning. This module introduces neural networks, deep learning architectures, and the basics of training deep models. Students will gain insights into the workings of neural networks and understand the role of activation functions, loss functions, and optimization algorithms in deep learning.'),(46,6,'Convolutional Neural Networks (CNNs)','Completion of Introduction to Deep Learning','Proficiency in designing and training Convolutional Neural Networks','CNNs are essential for image and video analysis. This module delves into the architecture and training of Convolutional Neural Networks. Students will learn to apply CNNs for image classification, object detection, and image segmentation. Practical exercises involve working with popular deep learning frameworks.'),(47,6,'Recurrent Neural Networks (RNNs) and Natural Language Processing','Completion of Introduction to Deep Learning','Ability to work with RNNs and apply them to natural language processing tasks','RNNs are crucial for sequential data processing. This module covers the architecture and training of Recurrent Neural Networks. Students will apply RNNs to natural language processing tasks, such as text generation, sentiment analysis, and language translation. The module also introduces techniques for handling sequential data in machine learning.'),(48,6,'Machine Learning for Time Series Analysis','Completion of Introduction to Machine Learning','Proficiency in applying machine learning to time series data','Time series analysis is common in various domains. This module focuses on applying machine learning techniques to time series data. Students will explore methods for forecasting, anomaly detection, and pattern recognition in time series. Practical exercises involve working with real-world time series datasets.'),(49,6,'Machine Learning Model Deployment','Completion of all previous modules','Ability to deploy and serve machine learning models in production','Deploying machine learning models is a critical step in bringing them into production. This module covers strategies for deploying models, creating APIs, and integrating machine learning into applications. Students will gain practical experience in deploying their trained models and making them accessible for real-world use.'),(50,6,'Machine Learning Capstone Project','Completion of all previous modules','Completion of a comprehensive machine learning project','The Machine Learning Capstone Project provides students with the opportunity to apply their skills to a real-world problem. Working on a comprehensive project, students will go through the entire machine learning lifecycle, from data preparation and model training to evaluation and deployment. This project serves as a culmination of the skills acquired throughout the course.'),(51,7,'Introduction to DevOps Principles','Basic Understanding of Software Development and IT Operations','Familiarity with key DevOps principles and practices','This module serves as an introduction to DevOps, covering fundamental principles and practices. Students will gain insights into the collaboration between development and operations teams, automation, and the importance of continuous integration and continuous delivery (CI/CD). The goal is to provide a solid foundation for adopting DevOps practices in software development projects.'),(52,7,'Version Control with Git','Completion of Introduction to DevOps Principles','Proficiency in using Git for version control','Version control is a cornerstone of DevOps. This module focuses on using Git for source code management. Students will learn Git fundamentals, branching strategies, and collaborative workflows. Practical exercises involve working with Git repositories, resolving merge conflicts, and integrating version control into the DevOps pipeline.'),(53,7,'Automated Build and Continuous Integration with Jenkins','Completion of Version Control with Git','Ability to set up automated builds and continuous integration pipelines using Jenkins','Automated builds and continuous integration (CI) streamline the development process. This module covers setting up Jenkins pipelines for automating builds, running tests, and integrating code changes. Students will configure Jenkins jobs, understand build triggers, and work with plugins to enhance the CI pipeline.'),(54,7,'Configuration Management with Ansible','Completion of Automated Build and Continuous Integration with Jenkins','Proficiency in using Ansible for configuration management','Configuration management is crucial for maintaining consistent environments. This module introduces Ansible, a powerful tool for automating configuration tasks. Students will learn to write Ansible playbooks, manage configurations, and automate deployment tasks. Practical exercises involve applying configuration changes to servers and managing infrastructure as code.'),(55,7,'Containerization with Docker','Completion of Configuration Management with Ansible','Ability to create, deploy, and manage containers using Docker','Containerization is a key DevOps practice. This module covers Docker, a popular containerization platform. Students will learn to create Docker containers, manage container images, and deploy applications using Docker Compose. The module also explores container orchestration concepts with an introduction to Kubernetes.'),(56,7,'Container Orchestration with Kubernetes','Completion of Containerization with Docker','Proficiency in deploying and managing containerized applications with Kubernetes','Kubernetes is a powerful container orchestration platform. This module dives into Kubernetes architecture, components, and practical use cases. Students will learn to deploy, scale, and manage containerized applications in a Kubernetes cluster. The module emphasizes best practices for container orchestration and application scalability.'),(57,7,'Continuous Deployment and Delivery','Completion of Container Orchestration with Kubernetes','Ability to implement continuous deployment and delivery practices','Continuous Deployment (CD) and Continuous Delivery (CD) are critical components of a DevOps pipeline. This module covers strategies for automating the deployment process, implementing canary releases, and managing feature toggles. Students will gain practical experience in setting up end-to-end CD pipelines.'),(58,7,'Monitoring and Logging in DevOps','Completion of Continuous Deployment and Delivery','Proficiency in implementing monitoring and logging solutions for DevOps','Effective monitoring and logging are essential for maintaining system health. This module introduces tools and practices for monitoring infrastructure, applications, and logs in a DevOps environment. Students will configure monitoring alerts, analyze logs, and gain insights into performance optimization.'),(59,7,'DevOps Best Practices and Culture','Completion of all previous modules','Understanding of DevOps best practices and fostering a DevOps culture','DevOps is not just about tools; it\'s also about culture and collaboration. This module explores DevOps best practices, cultural aspects, and the importance of communication and collaboration between teams. Students will learn strategies for implementing DevOps principles across an organization.'),(60,8,'Introduction to Data Analysis','Basic Understanding of Statistics and Microsoft Excel','Familiarity with fundamental data analysis concepts and tools','This module serves as an introduction to data analysis, covering key concepts such as exploratory data analysis (EDA), data visualization, and basic statistical methods. Students will learn to use tools like Microsoft Excel and gain insights into the importance of data analysis in making informed business decisions.'),(61,8,'Data Cleaning and Preprocessing','Completion of Introduction to Data Analysis','Ability to clean and preprocess raw data for analysis','Clean and well-preprocessed data is essential for meaningful analysis. This module focuses on techniques for cleaning and preprocessing raw data. Students will learn to handle missing values, outliers, and format inconsistencies. The module includes hands-on exercises using tools like Python and Pandas.'),(62,8,'Statistical Analysis with Python','Completion of Data Cleaning and Preprocessing','Proficiency in conducting statistical analysis using Python','Python is a powerful tool for statistical analysis. This module covers statistical methods and tests using Python libraries such as NumPy and SciPy. Students will explore hypothesis testing, regression analysis, and other statistical techniques. Practical exercises involve analyzing real-world datasets.'),(63,8,'Data Visualization with Matplotlib and Seaborn','Completion of Introduction to Data Analysis','Ability to create effective data visualizations using Python libraries','Data visualization is key to communicating insights. This module focuses on creating visualizations using Python libraries such as Matplotlib and Seaborn. Students will learn to generate various types of plots, charts, and graphs to convey meaningful information from their data.'),(64,8,'Exploratory Data Analysis (EDA)','Completion of Data Visualization with Matplotlib and Seaborn','Proficiency in conducting EDA to derive insights from data','Exploratory Data Analysis (EDA) is a crucial step in understanding data patterns. This module covers advanced EDA techniques using Python. Students will explore data distribution, correlation, and patterns. The module emphasizes extracting actionable insights from exploratory analysis.'),(65,8,'Data Analysis with SQL','Completion of Introduction to Data Analysis','Ability to perform data analysis using SQL queries','SQL is a powerful language for data analysis in relational databases. This module covers SQL basics and advanced querying techniques. Students will learn to extract, filter, and analyze data using SQL. Practical exercises involve working with real-world datasets and databases.'),(66,8,'Introduction to Machine Learning for Data Analysis','Completion of Statistical Analysis with Python','Understanding the basics of machine learning and its applications in data analysis','Machine learning enhances data analysis capabilities. This module introduces machine learning concepts relevant to data analysis. Students will explore supervised and unsupervised learning, model evaluation, and practical applications of machine learning in extracting insights from data.'),(67,9,'Introduction to Quality Assurance and Software Testing','Basic Understanding of Software Development','Familiarity with QA principles and the software testing process','This module serves as an introduction to Quality Assurance (QA) and software testing. Students will gain insights into the importance of quality in software development, the role of QA in the software development lifecycle, and the fundamentals of various testing methodologies. The goal is to establish a foundation for effective software testing practices.'),(68,9,'Manual Testing Techniques','Completion of Introduction to QA and Software Testing','Proficiency in manual testing techniques and test case design','Manual testing is a fundamental skill for QA professionals. This module covers manual testing techniques, test case design, and execution. Students will learn to identify test scenarios, create test cases, and execute them systematically. Practical exercises involve testing real-world applications to reinforce concepts.'),(69,9,'Automated Testing with Selenium','Completion of Manual Testing Techniques','Ability to automate web application testing using Selenium','Automated testing enhances efficiency and coverage. This module focuses on using Selenium, a popular tool for automating web application testing. Students will learn to create automated test scripts, perform functional testing, and integrate automated tests into the continuous integration pipeline.'),(70,9,'Performance Testing and Load Testing','Completion of Manual Testing Techniques','Proficiency in performance and load testing techniques','Performance testing is crucial for ensuring software scalability. This module covers performance testing concepts and techniques. Students will learn to identify performance bottlenecks, conduct load testing, and analyze performance metrics. Practical exercises involve using tools like JMeter for performance testing.'),(71,9,'API Testing with Postman','Completion of Manual Testing Techniques','Ability to perform API testing using Postman','API testing is essential for validating backend functionality. This module introduces API testing concepts and focuses on using Postman as a tool for API testing. Students will learn to create API requests, handle responses, and perform testing on RESTful APIs. Practical exercises involve testing real-world APIs.'),(72,9,'Mobile App Testing','Completion of Manual Testing Techniques','Proficiency in testing mobile applications on different platforms','Mobile app testing requires specialized knowledge. This module covers testing techniques for mobile applications on various platforms. Students will learn to test functionality, usability, and performance on different devices. The module includes practical exercises involving real-world mobile applications.'),(73,10,'Introduction to Mobile App Development','Basic Understanding of Programming Concepts','Understanding the fundamentals of mobile app development for Android and iOS platforms','This module serves as an introduction to mobile app development, covering the basic concepts and principles applicable to both Android and iOS platforms. Students will gain insights into the mobile development landscape, user interface design, and the fundamentals of programming for mobile applications.'),(74,10,'Android App Development with Java','Completion of Introduction to Mobile App Development','Proficiency in developing Android applications using Java','Android app development is a key focus in this module, with a primary emphasis on using Java as the programming language. Students will learn to create Android user interfaces, handle user input, and implement core functionalities. The module includes hands-on exercises to reinforce Android development concepts.'),(75,10,'iOS App Development with Swift','Completion of Introduction to Mobile App Development','Proficiency in developing iOS applications using Swift','iOS app development takes center stage in this module, with a focus on using Swift as the programming language. Students will learn to design user interfaces for iOS devices, implement features, and leverage iOS SDKs. Practical exercises involve creating and testing iOS applications on simulators and real devices.'),(76,10,'Cross-Platform App Development with Flutter','Completion of Android App Development with Java and iOS App Development with Swift','Ability to develop cross-platform applications using Flutter','Cross-platform development is gaining popularity. This module introduces Flutter, a framework for building natively compiled applications for mobile, web, and desktop from a single codebase. Students will learn to use Dart programming language and create cross-platform apps with a consistent user experience.'),(77,10,'Mobile App User Interface Design','Completion of Introduction to Mobile App Development','Proficiency in designing effective user interfaces for mobile applications','User interface design is crucial for mobile app success. This module focuses on principles and practices of mobile app UI/UX design. Students will learn to create visually appealing and user-friendly interfaces for both Android and iOS applications. The module includes design tools and practical UI design projects.'),(78,10,'Mobile App Testing and Debugging','Completion of Android App Development with Java and iOS App Development with Swift','Ability to test and debug mobile applications on Android and iOS platforms','Testing and debugging are integral parts of mobile app development. This module covers strategies for testing and debugging Android and iOS applications. Students will learn to use testing frameworks, troubleshoot common issues, and ensure the quality of their mobile applications.'),(79,11,'Introduction to MEAN Stack','Basic Understanding of Web Development','Understanding the fundamentals of MEAN Stack and its components','This module serves as an introduction to the MEAN Stack, covering the basics of MongoDB, Express.js, Angular, and Node.js. Students will gain insights into the role of each component in web development, the architecture of MEAN Stack applications, and the advantages of using this technology stack.'),(80,11,'MongoDB - NoSQL Database','Completion of Introduction to MEAN Stack','Proficiency in using MongoDB as a NoSQL database','MongoDB is a key component of the MEAN Stack. This module focuses on MongoDB as a NoSQL database, covering data modeling, CRUD operations, and interacting with MongoDB using the Node.js driver. Students will learn to store and retrieve data in a MongoDB database for MEAN Stack applications.'),(81,11,'Server-Side Development with Node.js and Express.js','Completion of Introduction to MEAN Stack','Ability to develop server-side applications using Node.js and Express.js','Node.js and Express.js work together to handle server-side logic in MEAN Stack applications. This module covers server-side development with Node.js and the Express.js framework. Students will learn to create RESTful APIs, handle HTTP requests, and manage routes for their MEAN Stack applications.'),(82,11,'Client-Side Development with Angular','Completion of Introduction to MEAN Stack','Proficiency in building dynamic and responsive user interfaces using Angular','Angular is a powerful front-end framework in the MEAN Stack. This module focuses on client-side development with Angular, covering components, services, and the Angular CLI. Students will learn to create interactive and responsive user interfaces for their MEAN Stack applications.'),(83,11,'Full Stack Development with MEAN','Completion of MongoDB, Node.js, Express.js, and Angular modules','Ability to develop end-to-end MEAN Stack applications','This module brings together the knowledge gained in previous modules for full-stack development. Students will learn to integrate MongoDB, Node.js, Express.js, and Angular to create cohesive MEAN Stack applications. The module includes hands-on projects to reinforce full-stack development concepts.'),(84,11,'Authentication and Authorization in MEAN Stack','Completion of Full Stack Development with MEAN','Understanding and implementing user authentication and authorization','Security is crucial in web applications. This module covers authentication and authorization in MEAN Stack applications. Students will learn to implement user registration, login, and access control using JWT (JSON Web Tokens) for secure authentication and authorization.');
/*!40000 ALTER TABLE `modules` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-01-30 12:19:50
